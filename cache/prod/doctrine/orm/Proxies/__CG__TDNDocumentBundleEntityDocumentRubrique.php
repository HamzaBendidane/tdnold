<?php

namespace Proxies\__CG__\TDN\DocumentBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DocumentRubrique extends \TDN\DocumentBundle\Entity\DocumentRubrique implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setTitre($titre)
    {
        $this->__load();
        return parent::setTitre($titre);
    }

    public function getTitre()
    {
        $this->__load();
        return parent::getTitre();
    }

    public function setSlug($slug)
    {
        $this->__load();
        return parent::setSlug($slug);
    }

    public function getSlug()
    {
        $this->__load();
        return parent::getSlug();
    }

    public function getSuperSlug()
    {
        $this->__load();
        return parent::getSuperSlug();
    }

    public function setAbstract($abstract)
    {
        $this->__load();
        return parent::setAbstract($abstract);
    }

    public function getAbstract()
    {
        $this->__load();
        return parent::getAbstract();
    }

    public function setParent($parent)
    {
        $this->__load();
        return parent::setParent($parent);
    }

    public function getParent()
    {
        $this->__load();
        return parent::getParent();
    }

    public function setCouleur($couleur)
    {
        $this->__load();
        return parent::setCouleur($couleur);
    }

    public function getCouleur()
    {
        $this->__load();
        return parent::getCouleur();
    }

    public function setSponsorImage($sponsorImage)
    {
        $this->__load();
        return parent::setSponsorImage($sponsorImage);
    }

    public function getSponsorImage()
    {
        $this->__load();
        return parent::getSponsorImage();
    }

    public function setSponsorLink($sponsorLink)
    {
        $this->__load();
        return parent::setSponsorLink($sponsorLink);
    }

    public function getSponsorLink()
    {
        $this->__load();
        return parent::getSponsorLink();
    }

    public function setStatut($statut)
    {
        $this->__load();
        return parent::setStatut($statut);
    }

    public function getStatut()
    {
        $this->__load();
        return parent::getStatut();
    }

    public function setDatePublication($datePublication)
    {
        $this->__load();
        return parent::setDatePublication($datePublication);
    }

    public function getDatePublication()
    {
        $this->__load();
        return parent::getDatePublication();
    }

    public function setDateModification($dateModification)
    {
        $this->__load();
        return parent::setDateModification($dateModification);
    }

    public function getDateModification()
    {
        $this->__load();
        return parent::getDateModification();
    }

    public function getIdRubrique()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["idRubrique"];
        }
        $this->__load();
        return parent::getIdRubrique();
    }

    public function addSousRubrique(\TDN\DocumentBundle\Entity\DocumentRubrique $sousRubriques)
    {
        $this->__load();
        return parent::addSousRubrique($sousRubriques);
    }

    public function removeSousRubrique(\TDN\DocumentBundle\Entity\DocumentRubrique $sousRubriques)
    {
        $this->__load();
        return parent::removeSousRubrique($sousRubriques);
    }

    public function getSousRubriques()
    {
        $this->__load();
        return parent::getSousRubriques();
    }

    public function setRubriqueParente(\TDN\DocumentBundle\Entity\DocumentRubrique $rubriqueParente = NULL)
    {
        $this->__load();
        return parent::setRubriqueParente($rubriqueParente);
    }

    public function getRubriqueParente()
    {
        $this->__load();
        return parent::getRubriqueParente();
    }

    public function addSetDomaine(\TDN\NanaBundle\Entity\NanaExpertise $setDomaines)
    {
        $this->__load();
        return parent::addSetDomaine($setDomaines);
    }

    public function removeSetDomaine(\TDN\NanaBundle\Entity\NanaExpertise $setDomaines)
    {
        $this->__load();
        return parent::removeSetDomaine($setDomaines);
    }

    public function getSetDomaines()
    {
        $this->__load();
        return parent::getSetDomaines();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'titre', 'slug', 'abstract', 'parent', 'couleur', 'sponsorImage', 'sponsorLink', 'statut', 'datePublication', 'dateModification', 'idRubrique', 'sousRubriques', 'setDomaines', 'rubriqueParente');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}